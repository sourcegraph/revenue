#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_success() { echo -e "${GREEN}✓${NC} $1"; }
print_error() { echo -e "${RED}✗${NC} $1"; }
print_warning() { echo -e "${YELLOW}⚠${NC} $1"; }
print_info() { echo -e "${BLUE}ℹ${NC} $1"; }

# Check if overmind is available
check_overmind() {
  if ! command -v overmind &>/dev/null; then
    print_error "overmind is required but not installed"
    print_info "Install with: brew install overmind"
    exit 1
  fi
}

# Get port from .env file
get_port() {
  local app_dir="$1"
  if [[ -f "$app_dir/.env" ]]; then
    grep "^PORT=" "$app_dir/.env" 2>/dev/null | cut -d'=' -f2 || echo ""
  else
    echo ""
  fi
}

# Simple check if overmind is running for this app
is_running() {
  local app_dir="$1"
  [[ -S "$app_dir/.overmind.sock" ]]
}

# Get comprehensive info about a single app
# Returns: language|framework|app_dir|port|running_status
get_app_info() {
  local language="$1"
  local framework="$2"
  local app_dir="$language/$framework"
  local port=""
  local running_status="stopped"

  if [[ -f "$app_dir/.env" ]]; then
    port=$(get_port "$app_dir")
  fi

  if is_running "$app_dir"; then
    running_status="running"
  fi

  echo "$language|$framework|$app_dir|$port|$running_status"
}

# Get info for all discovered apps
# Each line: language|framework|app_dir|port|running_status
get_all_apps_info() {
  for lang_dir in */; do
    lang=$(basename "$lang_dir")
    if [[ "$lang" == "." || "$lang" == ".." ]]; then
      continue
    fi
    if [[ -d "$lang_dir" ]]; then
      for framework_dir in "$lang_dir"*/; do
        if [[ -d "$framework_dir" && -f "$framework_dir/Procfile" ]]; then
          framework=$(basename "$framework_dir")
          get_app_info "$lang" "$framework"
        fi
      done
    fi
  done
}

# Start a single demo
start_demo() {
  local language="$1"
  local framework="$2"
  local app_dir="$language/$framework"

  if [[ ! -d "$app_dir" ]]; then
    print_error "Directory $app_dir does not exist"
    return 1
  fi

  if [[ ! -f "$app_dir/Procfile" ]]; then
    print_error "No Procfile found in $app_dir"
    return 1
  fi

  # Get current app info
  local app_info
  app_info=$(get_app_info "$language" "$framework")
  IFS='|' read -r _ _ _ port running_status <<<"$app_info"

  if [[ "$running_status" == "running" ]]; then
    print_warning "$language/$framework is already running"
    [[ -n "$port" ]] && print_info "Available at: http://localhost:$port"
    return 0
  fi

  print_info "Starting $language/$framework..."

  (
    cd "$app_dir"

    # Use mise to ensure dependencies are available
    if [[ -f ".mise.toml" || -f ".tool-versions" ]]; then
      mise install >/dev/null 2>&1 || true
    fi

    # Start overmind in daemon mode - let it handle everything
    overmind start -D
  )

  # Simple wait for overmind socket to appear
  local count=0
  while [[ $count -lt 15 ]]; do
    app_info=$(get_app_info "$language" "$framework")
    IFS='|' read -r _ _ _ port running_status <<<"$app_info"

    if [[ "$running_status" == "running" ]]; then
      print_success "Started $language/$framework"
      [[ -n "$port" ]] && print_info "Available at: http://localhost:$port"
      return 0
    fi
    sleep 1
    count=$((count + 1))
  done

  print_error "Failed to start $language/$framework (timeout)"
  return 1
}

# Stop a single demo
stop_demo() {
  local language="$1"
  local framework="$2"
  local app_dir="$language/$framework"

  # Get current app info
  local app_info
  app_info=$(get_app_info "$language" "$framework")
  IFS='|' read -r _ _ _ port running_status <<<"$app_info"

  if [[ "$running_status" != "running" ]]; then
    print_warning "$language/$framework is not running"
    return 0
  fi

  print_info "Stopping $language/$framework..."

  # Let overmind handle graceful shutdown
  (cd "$app_dir" && overmind quit)

  print_success "Stopped $language/$framework"
}

# Start all demos
start_all() {
  local app_count=0
  local started=0
  local failed=0

  print_info "Starting all demo applications..."

  while IFS='|' read -r language framework app_dir port running_status; do
    [[ -z "$language" ]] && continue
    app_count=$((app_count + 1))

    if start_demo "$language" "$framework"; then
      started=$((started + 1))
    else
      failed=$((failed + 1))
    fi
  done < <(get_all_apps_info)

  if [[ $app_count -eq 0 ]]; then
    print_warning "No demo applications found"
    return 0
  fi

  print_success "Started $started demo applications"
  [[ $failed -gt 0 ]] && print_warning "$failed demo applications failed to start"
}

# Stop all demos
stop_all() {
  local app_count=0

  print_info "Stopping all demo applications..."

  while IFS='|' read -r language framework app_dir port running_status; do
    [[ -z "$language" ]] && continue
    app_count=$((app_count + 1))
    stop_demo "$language" "$framework"
  done < <(get_all_apps_info)

  if [[ $app_count -eq 0 ]]; then
    print_info "No demo applications found"
    return 0
  fi
}

# Restart a single demo
restart_demo() {
  local language="$1"
  local framework="$2"

  stop_demo "$language" "$framework"
  sleep 1
  start_demo "$language" "$framework"
}

# Restart all demos
restart_all() {
  stop_all
  sleep 2
  start_all
}

# List all demos with their status
list_demos() {
  print_info "Available demo applications:"

  while IFS='|' read -r language framework app_dir port running_status; do
    [[ -z "$language" ]] && continue

    local url_info=""
    if [[ "$running_status" == "running" && -n "$port" ]]; then
      url_info=" - http://localhost:$port"
    fi

    printf "  %-20s %s%s\n" "$language/$framework" "($running_status)" "$url_info"
  done < <(get_all_apps_info)
}

# List only running demos
list_running() {
  print_info "Running demo applications:"

  while IFS='|' read -r language framework app_dir port running_status; do
    [[ -z "$language" ]] && continue

    if [[ "$running_status" == "running" ]]; then
      local url_info=""
      [[ -n "$port" ]] && url_info=" - http://localhost:$port"
      printf "  %-20s %s%s\n" "$language/$framework" "(running)" "$url_info"
    fi
  done < <(get_all_apps_info)
}

# Show logs for a demo - use overmind's native echo command
show_logs() {
  local language="$1"
  local framework="$2"
  local app_dir="$language/$framework"

  if [[ -z "$language" || -z "$framework" ]]; then
    print_error "Usage: demo logs <language> <framework>"
    return 1
  fi

  # Get current app info
  local app_info
  app_info=$(get_app_info "$language" "$framework")
  IFS='|' read -r _ _ _ port running_status <<<"$app_info"

  if [[ "$running_status" != "running" ]]; then
    print_error "$language/$framework is not running"
    return 1
  fi

  print_info "Showing logs for $language/$framework (Ctrl+C to exit):"
  (cd "$app_dir" && overmind echo)
}

# Connect to a demo - use overmind's native connect command
connect_demo() {
  local language="$1"
  local framework="$2"
  local app_dir="$language/$framework"

  if [[ -z "$language" || -z "$framework" ]]; then
    print_error "Usage: demo connect <language> <framework>"
    return 1
  fi

  # Get current app info
  local app_info
  app_info=$(get_app_info "$language" "$framework")
  IFS='|' read -r _ _ _ port running_status <<<"$app_info"

  if [[ "$running_status" != "running" ]]; then
    print_error "$language/$framework is not running"
    return 1
  fi

  print_info "Connecting to $language/$framework..."
  (cd "$app_dir" && overmind connect web)
}

# Open a single demo in browser
open_demo() {
  local language="$1"
  local framework="$2"
  local app_dir="$language/$framework"

  if [[ -z "$language" || -z "$framework" ]]; then
    print_error "Usage: demo open <language> <framework>"
    return 1
  fi

  # Get current app info
  local app_info
  app_info=$(get_app_info "$language" "$framework")
  IFS='|' read -r _ _ _ port running_status <<<"$app_info"

  if [[ "$running_status" != "running" ]]; then
    print_error "$language/$framework is not running"
    return 1
  fi

  if [[ -z "$port" ]]; then
    print_error "No port configured for $language/$framework"
    return 1
  fi

  print_info "Opening $language/$framework in browser..."
  open "http://localhost:$port"
}

# Open all running demos in browser
open_all() {
  local app_count=0
  local opened=0

  print_info "Opening all running demo applications in browser..."

  while IFS='|' read -r language framework app_dir port running_status; do
    [[ -z "$language" ]] && continue
    app_count=$((app_count + 1))

    if [[ "$running_status" == "running" ]]; then
      if [[ -n "$port" ]]; then
        print_info "Opening $language/$framework..."
        open "http://localhost:$port"
        opened=$((opened + 1))
      else
        print_warning "No port configured for $language/$framework"
      fi
    fi
  done < <(get_all_apps_info)

  if [[ $app_count -eq 0 ]]; then
    print_info "No demo applications found"
    return 0
  fi

  if [[ $opened -eq 0 ]]; then
    print_warning "No running demo applications found to open"
  else
    print_success "Opened $opened demo applications in browser"
  fi
}

# Force cleanup all processes and sockets
clean_all() {
  local confirm_flag="$1"

  if [[ "$confirm_flag" != "--confirm" ]]; then
    print_error "This will forcibly kill all demo processes and clean up all sockets!"
    print_error "Use: demo clean --confirm"
    return 1
  fi

  print_warning "Cleaning up all demo applications..."

  while IFS='|' read -r language framework app_dir port running_status; do
    [[ -z "$language" ]] && continue

    # Kill overmind sessions
    if [[ -S "$app_dir/.overmind.sock" ]]; then
      print_info "Terminating overmind session for $language/$framework"
      (cd "$app_dir" && overmind quit >/dev/null 2>&1) || true
      rm -f "$app_dir/.overmind.sock"
    fi

    # Kill orphaned processes on ports
    if [[ -n "$port" ]]; then
      local existing_pids
      existing_pids=$(lsof -t -i ":$port" 2>/dev/null || true)
      if [[ -n "$existing_pids" ]]; then
        print_info "Killing orphaned processes for $language/$framework on port $port"
        echo "$existing_pids" | xargs kill -TERM 2>/dev/null || true
        sleep 1

        # Force kill if still running
        existing_pids=$(lsof -t -i ":$port" 2>/dev/null || true)
        if [[ -n "$existing_pids" ]]; then
          echo "$existing_pids" | xargs kill -KILL 2>/dev/null || true
        fi
      fi
    fi
  done < <(get_all_apps_info)

  # Clean up any remaining socket files
  find . -name ".overmind.sock" -delete 2>/dev/null || true

  print_success "Cleaned up all demo processes and sockets"
}

# Reset all demos to clean git state
reset_all() {
  local confirm_flag="$1"

  if [[ "$confirm_flag" != "--confirm" ]]; then
    print_error "This will forcibly kill all processes AND revert all file changes!"
    print_error "All modifications made during demo sessions will be lost!"
    print_error "Use: demo reset --confirm"
    return 1
  fi

  print_warning "Resetting all demo applications to clean state..."

  # First clean up all processes and sockets
  clean_all --confirm

  # Check if we're in a git repository
  if ! git rev-parse --git-dir >/dev/null 2>&1; then
    print_error "Not in a git repository - cannot reset file changes"
    return 1
  fi

  if ! git restore . 2>/dev/null; then
    print_warning "Some files could not be restored (may not exist in git)"
  fi

  if ! git clean -fd 2>/dev/null; then
    print_warning "Some untracked files could not be cleaned"
  fi

  print_success "Reset complete - all demo applications restored to clean git state"
  print_info "Run 'demo start all' to start fresh demo sessions"
}

# Show usage
show_usage() {
  echo "Demo Application Manager"
  echo ""
  echo "Usage:"
  echo "  demo start <language> <framework>   Start a demo application"
  echo "  demo start all                      Start all demo applications"
  echo "  demo stop <language> <framework>    Stop a demo application"
  echo "  demo stop all                       Stop all demo applications"
  echo "  demo restart <language> <framework> Restart a demo application"
  echo "  demo restart all                    Restart all running applications"
  echo "  demo logs <language> <framework>    Show logs from a running demo"
  echo "  demo connect <language> <framework> Connect to a running demo"
  echo "  demo open <language> <framework>    Open a demo application in browser"
  echo "  demo open all                       Open all running demos in browser"
  echo "  demo list                           List all demos with status"
  echo "  demo running                        List only running demos"
  echo "  demo clean --confirm                Force cleanup all processes and sockets"
  echo "  demo reset --confirm                Reset to clean git state (clean + git restore)"
  echo "  demo help                           Show this help"
  echo ""
  echo "Examples:"
  echo "  demo start python flask"
  echo "  demo start all"
  echo "  demo stop javascript react"
  echo "  demo restart python flask"
  echo "  demo logs python flask"
  echo "  demo open python flask"
  echo "  demo open all"
  echo ""
}

# Main script logic
main() {
  check_overmind

  local command="$1"
  shift || true

  case "$command" in
  start)
    if [[ "$1" == "all" ]]; then
      start_all
    else
      start_demo "$1" "$2"
    fi
    ;;
  stop)
    if [[ "$1" == "all" ]]; then
      stop_all
    else
      stop_demo "$1" "$2"
    fi
    ;;
  restart)
    if [[ "$1" == "all" ]]; then
      restart_all
    else
      restart_demo "$1" "$2"
    fi
    ;;
  logs)
    show_logs "$1" "$2"
    ;;
  connect)
    connect_demo "$1" "$2"
    ;;
  open)
    if [[ "$1" == "all" ]]; then
      open_all
    else
      open_demo "$1" "$2"
    fi
    ;;
  list)
    list_demos
    ;;
  running)
    list_running
    ;;
  clean)
    clean_all "$1"
    ;;
  reset)
    reset_all "$1"
    ;;
  help | --help | -h | "")
    show_usage
    ;;
  *)
    print_error "Unknown command: $command"
    show_usage
    exit 1
    ;;
  esac
}

main "$@"
