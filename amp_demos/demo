#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_success() { echo -e "${GREEN}✓${NC} $1"; }
print_error() { echo -e "${RED}✗${NC} $1"; }
print_warning() { echo -e "${YELLOW}⚠${NC} $1"; }
print_info() { echo -e "${BLUE}ℹ${NC} $1"; }

# Check if overmind is available
check_overmind() {
  if ! command -v overmind &>/dev/null; then
    print_error "overmind is required but not installed"
    print_info "Install with: brew install overmind"
    exit 1
  fi
}

# Discover all demo applications (those with Procfile)
discover_apps() {
  local apps=()
  for lang_dir in */; do
    lang=$(basename "$lang_dir")
    if [[ "$lang" == "." || "$lang" == ".." ]]; then
      continue
    fi
    if [[ -d "$lang_dir" ]]; then
      for framework_dir in "$lang_dir"*/; do
        if [[ -d "$framework_dir" && -f "$framework_dir/Procfile" ]]; then
          framework=$(basename "$framework_dir")
          apps+=("$lang:$framework")
        fi
      done
    fi
  done
  printf '%s\n' "${apps[@]}"
}

# Get session name for overmind
get_session_name() {
  local language="$1"
  local framework="$2"
  echo "${language}-${framework}"
}

# Get port from .env file
get_port() {
  local app_dir="$1"
  if [[ -f "$app_dir/.env" ]]; then
    grep "^PORT=" "$app_dir/.env" 2>/dev/null | cut -d'=' -f2 || echo ""
  else
    echo ""
  fi
}

# Prepare demo environment
prepare_demo_environment() {
  local language="$1"
  local framework="$2"
  local app_dir="$language/$framework"

  if [[ ! -d "$app_dir" ]]; then
    print_error "Directory $app_dir does not exist"
    return 1
  fi

  if [[ ! -f "$app_dir/Procfile" ]]; then
    print_error "No Procfile found in $app_dir"
    return 1
  fi

  # Trust and install mise tools if mise config exists
  if [[ -f "$app_dir/.mise.toml" || -f "$app_dir/.tool-versions" ]]; then
    print_info "Installing required tools with mise..."
    if ! (cd "$app_dir" && mise trust 2>/dev/null && mise install 2>/dev/null); then
      print_warning "mise install failed or no mise configuration found"
    fi
  fi

  return 0
}

# Start a demo application
start_app() {
  local language="$1"
  local framework="$2"

  if [[ -z "$language" || -z "$framework" ]]; then
    print_error "Usage: demo start <language> <framework>"
    return 1
  fi

  local session_name
  session_name=$(get_session_name "$language" "$framework")
  local app_dir="$language/$framework"

  # Prepare the demo environment
  if ! prepare_demo_environment "$language" "$framework"; then
    return 1
  fi

  # Check if session already exists
  if (cd "$app_dir" && overmind status -s "$session_name" &>/dev/null); then
    local port
    port=$(get_port "$app_dir")
    print_warning "Demo $language/$framework is already running"
    if [[ -n "$port" ]]; then
      print_info "Application available at: http://localhost:$port"
    fi
    return 0
  fi

  print_info "Starting $language/$framework demo..."

  # Run setup if it exists in Procfile, then start
  (
  cd "$app_dir"
  if grep -q "^setup:" Procfile; then
    print_info "Installing dependencies..."
    local setup_cmd
    setup_cmd=$(grep "^setup:" Procfile | cut -d':' -f2- | sed 's/^ *//')
    mise exec -- bash -c "$setup_cmd" || true
  fi
  # Create a temporary Procfile with only web processes for overmind  
  if grep -q "^setup:" Procfile; then
    cp Procfile Procfile.orig
    grep -v "^setup:" Procfile.orig > Procfile
  fi
  mise exec -- overmind start -s "$session_name" -D
  if [ -f Procfile.orig ]; then
    mv Procfile.orig Procfile
  fi
  ) &

  # Wait a moment and check status
  sleep 3
  local status_check=0
  for i in {1..3}; do
    if (cd "$app_dir" && overmind status -s "$session_name" 2>/dev/null | grep -q "web.*running"); then
      status_check=1
      break
    fi
    sleep 2
  done
  
  if [ $status_check -eq 1 ]; then
    local port
    port=$(get_port "$app_dir")
    print_success "Started $language/$framework demo"
    if [[ -n "$port" ]]; then
      print_info "Application available at: http://localhost:$port"
    fi
    print_info "View logs: revenue demo logs $language $framework"
    print_info "Connect: revenue demo connect $language $framework"
  else
    print_error "Failed to start $language/$framework demo"
    return 1
  fi
}

# Start all demo applications
start_all() {
  local apps=()
  while IFS= read -r line; do
    [[ -n "$line" ]] && apps+=("$line")
  done < <(discover_apps)

  if [[ ${#apps[@]} -eq 0 ]]; then
    print_warning "No demo applications found"
    return 0
  fi

  print_info "Starting all demo applications..."
  local started=0
  local failed=0

  for app in "${apps[@]}"; do
    IFS=':' read -r language framework <<<"$app"
    if start_app "$language" "$framework"; then
      started=$((started + 1))
    else
      failed=$((failed + 1))
    fi
  done

  print_success "Started $started demo applications"
  if [[ $failed -gt 0 ]]; then
    print_warning "$failed demo applications failed to start"
  fi
}

# Stop a demo application
stop_app() {
  local language="$1"
  local framework="$2"

  if [[ -z "$language" || -z "$framework" ]]; then
    print_error "Usage: demo stop <language> <framework>"
    return 1
  fi

  local session_name
  session_name=$(get_session_name "$language" "$framework")
  local app_dir="$language/$framework"

  if (cd "$app_dir" && overmind status -s "$session_name" &>/dev/null); then
    (cd "$app_dir" && overmind quit -s "$session_name")
    print_success "Stopped $language/$framework demo"
  else
    print_warning "$language/$framework demo is not running"
  fi
}

# Stop all demo applications
stop_all() {
  local apps=()
  while IFS= read -r line; do
    [[ -n "$line" ]] && apps+=("$line")
  done < <(discover_apps)

  if [[ ${#apps[@]} -eq 0 ]]; then
    print_info "No demo applications found"
    return 0
  fi

  print_info "Stopping all demo applications..."
  for app in "${apps[@]}"; do
    IFS=':' read -r language framework <<<"$app"
    stop_app "$language" "$framework"
  done
}

# View logs from a demo application
logs_app() {
  local language="$1"
  local framework="$2"

  if [[ -z "$language" || -z "$framework" ]]; then
    print_error "Usage: demo logs <language> <framework>"
    return 1
  fi

  local session_name
  session_name=$(get_session_name "$language" "$framework")
  local app_dir="$language/$framework"

  if ! (cd "$app_dir" && overmind status -s "$session_name" &>/dev/null); then
    print_error "$language/$framework demo is not running"
    return 1
  fi

  print_info "Logs from $language/$framework demo:"
  print_info "Press Ctrl+C to exit logs"
  echo ""
  
  # Find the overmind tmux socket for this session
  local tmux_socket
  local tmux_session_name="$framework"  # overmind uses just the framework name
  tmux_socket=$(ps aux | grep "tmux.*$tmux_session_name" | grep -v grep | head -1 | sed -n 's/.*-L \([^ ]*\).*/\1/p')
  
  if [[ -n "$tmux_socket" ]]; then
    # Set up clean exit on interrupt with a flag
    local continue_logs=1
    trap 'continue_logs=0; printf "\r\033[K"; print_info "Exited logs"' INT
    
    # Use tmux to capture and follow the pane output
    tmux -L "$tmux_socket" capture-pane -t "$tmux_session_name" -p
    echo ""
    print_info "Following live logs (press Ctrl+C to exit):"
    
    while [ $continue_logs -eq 1 ]; do
      sleep 2
      if [ $continue_logs -eq 1 ]; then
        tmux -L "$tmux_socket" capture-pane -t "$tmux_session_name" -p | tail -10
      fi
    done
    trap - INT
  else
    print_error "Could not find tmux session for $language/$framework"
    return 1
  fi
}

# Connect to a demo application
connect_app() {
  local language="$1"
  local framework="$2"

  if [[ -z "$language" || -z "$framework" ]]; then
    print_error "Usage: demo connect <language> <framework>"
    return 1
  fi

  local session_name
  session_name=$(get_session_name "$language" "$framework")
  local app_dir="$language/$framework"

  if ! (cd "$app_dir" && overmind status -s "$session_name" &>/dev/null); then
    print_error "$language/$framework demo is not running"
    return 1
  fi

  print_info "Connecting to $language/$framework demo..."
  (cd "$app_dir" && overmind connect web -s "$session_name")
}

# List all available demos
list_demos() {
  print_info "Available demo applications:"
  discover_apps | while IFS=':' read -r language framework; do
    local session_name
    session_name=$(get_session_name "$language" "$framework")
    local app_dir="$language/$framework"
    local status="stopped"
    local url_info=""
    
    if (cd "$app_dir" && overmind status -s "$session_name" &>/dev/null); then
      status="running"
      local port
      port=$(get_port "$app_dir")
      if [[ -n "$port" ]]; then
        url_info=" - http://localhost:$port"
      fi
    fi
    
    printf "  %-20s %s%s\n" "$language/$framework" "($status)" "$url_info"
  done
}

# List running demos
list_running() {
  print_info "Running demo applications:"
  discover_apps | while IFS=':' read -r language framework; do
    local session_name
    session_name=$(get_session_name "$language" "$framework")
    local app_dir="$language/$framework"
    
    if (cd "$app_dir" && overmind status -s "$session_name" &>/dev/null); then
      local port
      port=$(get_port "$app_dir")
      local url_info=""
      if [[ -n "$port" ]]; then
        url_info=" - http://localhost:$port"
      fi
      printf "  %-20s %s%s\n" "$language/$framework" "(running)" "$url_info"
    fi
  done
}

# Clean the demo directory (same as original)
clean_demos() {
  local confirm_flag="$1"

  if [[ "$confirm_flag" != "--confirm" ]]; then
    print_error "This will reset all changes in the demo directory!"
    print_error "Use: demo clean --confirm"
    return 1
  fi

  print_warning "Cleaning demo directory - this will reset all local changes!"

  # Stop all running demos first
  stop_all

  # Reset git state
  git reset --hard HEAD
  git clean -fd

  print_success "Demo directory cleaned and reset"
}

# Show usage information
show_usage() {
  echo "Demo Application Manager"
  echo ""
  echo "Usage:"
  echo "  demo start <language> <framework>   Start a demo application"
  echo "  demo start all                      Start all demo applications"
  echo "  demo stop <language> <framework>    Stop a demo application"
  echo "  demo stop all                       Stop all demo applications"
  echo "  demo logs <language> <framework>    View logs from a running demo"
  echo "  demo connect <language> <framework> Connect to a running demo"
  echo "  demo list                           List all available demos"
  echo "  demo running                        List running demos"
  echo "  demo clean --confirm                Reset demo directory"
  echo "  demo help                           Show this help"
  echo ""
  echo "Examples:"
  echo "  demo start python flask"
  echo "  demo start all"
  echo "  demo stop javascript react"
  echo "  demo stop all"
  echo "  demo logs python flask"
  echo "  demo connect python flask"
  echo ""
}

# Main script logic
main() {
  check_overmind

  local command="$1"

  case "$command" in
  start)
    if [[ "$2" == "all" ]]; then
      start_all
    else
      start_app "$2" "$3"
    fi
    ;;
  stop)
    if [[ "$2" == "all" ]]; then
      stop_all
    else
      stop_app "$2" "$3"
    fi
    ;;
  logs)
    logs_app "$2" "$3"
    ;;
  connect|attach)
    connect_app "$2" "$3"
    ;;
  list)
    list_demos
    ;;
  running)
    list_running
    ;;
  clean)
    clean_demos "$2"
    ;;
  help | --help | -h)
    show_usage
    ;;
  "")
    show_usage
    exit 1
    ;;
  *)
    print_error "Unknown command: $command"
    show_usage
    exit 1
    ;;
  esac
}

main "$@"
