#!/bin/bash

# revenue - Sourcegraph Revenue team workstation setup

set -e # Exit on any error

# Get the real script directory (resolving symlinks) - macOS compatible
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_success() {
  echo -e "${GREEN}✓ $1${NC}"
}

print_info() {
  echo -e "${BLUE}ℹ $1${NC}"
}

print_warning() {
  echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
  echo -e "${RED}✗ $1${NC}"
}

# Function to check if command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Function to check if running on macOS
check_macos() {
  if [[ "$OSTYPE" != "darwin"* ]]; then
    print_error "This script currently only supports macOS."
    exit 1
  fi
}

# Function to show help menu
show_help() {
  cat <<EOF
revenue - Sourcegraph Revenue Team Workstation Setup

DESCRIPTION:
    This utility will setup your environment and ensure you have the necessary tools to both demo and use Amp.

USAGE:
    revenue [COMMAND]

COMMANDS:
    init        Initialize your workstation
    
    update      Update existing tools and packages
    
    demo        Manage demo applications (delegates to amp_demos/demo.sh)
    
    help        Show this help message

EXAMPLES:
    revenue init
    revenue init --install-path /custom/path
    revenue update
    revenue demo start python flask
    revenue help

For more information, visit: https://github.com/sourcegraph/revenue
EOF
}

# Install prerequisites (Xcode CLT and Homebrew)
install_prerequisites() {
  # Check if Xcode Command Line Tools are installed
  if ! command_exists "git"; then
    print_info "Installing Xcode Command Line Tools..."
    xcode-select --install
    print_warning "Please complete the Xcode Command Line Tools installation and run this script again."
    exit 0
  else
    print_success "Xcode Command Line Tools are already installed"
  fi

  # Install Homebrew if needed
  if ! command_exists "brew"; then
    print_info "Installing Homebrew..."
    if curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash; then
      print_success "Homebrew installed successfully"

      # Add Homebrew to PATH for current session
      if [[ -f "/opt/homebrew/bin/brew" ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
      elif [[ -f "/usr/local/bin/brew" ]]; then
        eval "$(/usr/local/bin/brew shellenv)"
      fi
    else
      print_error "Failed to install Homebrew"
      exit 1
    fi
  else
    print_success "Homebrew is already installed"
  fi
}

# Install dependencies via Brewfile
install_brewfile_dependencies() {
  cd "$SCRIPT_DIR"

  # Ensure VS Code is managed by Homebrew and up to date before installing extensions
  if [[ -d "/Applications/Visual Studio Code.app" ]]; then
    if ! brew list --cask visual-studio-code >/dev/null 2>&1; then
      print_info "Adopting existing Visual Studio Code installation..."
      brew install --cask visual-studio-code --force --quiet || true
    else
      print_info "Updating Visual Studio Code..."
      brew upgrade --cask visual-studio-code --quiet || true
    fi
  fi

  if brew bundle install --force --quiet; then
    print_success "Brewfile dependencies installed successfully"
  else
    print_error "Failed to install Brewfile dependencies"
    exit 1
  fi
}

# Update dependencies via Brewfile
update_brewfile_dependencies() {
  # Update Homebrew first
  brew update

  # Upgrade outdated formulae
  brew upgrade

  # Ensure VS Code is managed by Homebrew and up to date before installing extensions
  if [[ -d "/Applications/Visual Studio Code.app" ]]; then
    if ! brew list --cask visual-studio-code >/dev/null 2>&1; then
      print_info "Adopting existing Visual Studio Code installation..."
      brew install --cask visual-studio-code --force --quiet || true
    else
      print_info "Ensuring Visual Studio Code is up to date..."
      brew upgrade --cask visual-studio-code --quiet || true
    fi
  fi

  # Install/update via Brewfile
  cd "$SCRIPT_DIR"
  if brew bundle install --force --quiet; then
    print_success "Dependencies updated successfully"
  else
    print_error "Failed to update dependencies"
    exit 1
  fi

  # Cleanup
  brew cleanup
  print_success "Cleanup completed"
}

# Install Amp CLI
install_amp_cli() {
  if ! command_exists "amp"; then
    print_info "Installing Amp CLI..."

    # Use repository temp directory to avoid system temp permission issues
    export TMPDIR="$SCRIPT_DIR/.tmp"
    mkdir -p "$TMPDIR"

    if curl -fsSL https://ampcode.com/install.sh | bash; then
      print_success "Amp CLI: installed successfully"
    else
      print_error "Amp CLI: failed to install"
      exit 1
    fi
  fi
}

update_amp_cli() {
  if ! command_exists "amp"; then
    install_amp_cli
  else
    {
      amp update
    }
  fi
}

# Setup global revenue command
setup_global_command() {
  # Get the absolute path of this script
  local script_path
  script_path="$(realpath "$SCRIPT_DIR/revenue")"

  # Create ~/.local/bin if it doesn't exist
  local local_bin_dir="$HOME/.local/bin"
  if [[ ! -d "$local_bin_dir" ]]; then
    mkdir -p "$local_bin_dir"
    print_success "Created $local_bin_dir directory"
  fi

  # Remove old revenue-setup symlink if it exists
  local old_symlink_path="$local_bin_dir/revenue-setup"
  if [[ -L "$old_symlink_path" || -f "$old_symlink_path" ]]; then
    rm "$old_symlink_path"
    print_success "Removed old revenue-setup symlink"
  fi

  # Create symlink
  local symlink_path="$local_bin_dir/revenue"
  if [[ -L "$symlink_path" ]]; then
    rm "$symlink_path"
  elif [[ -f "$symlink_path" ]]; then
    print_warning "File exists at $symlink_path, removing..."
    rm "$symlink_path"
  fi

  ln -s "$script_path" "$symlink_path"
  print_success "Created global command: revenue"

  # Check if ~/.local/bin is in PATH
  if [[ ":$PATH:" != *":$local_bin_dir:"* ]]; then
    local shell_type
    shell_type=$(detect_shell)
    local profile_path
    profile_path=$(get_shell_profile "$shell_type")

    print_warning "$HOME/.local/bin is not in your PATH"
    print_info "Add this line to your shell profile ($(basename "$profile_path")):"
    echo "    export PATH=\"\$HOME/.local/bin:\$PATH\""
    print_info "Or run: echo 'export PATH=\"\$HOME/.local/bin:\$PATH\"' >> $profile_path"
  else
    print_success "$HOME/.local/bin is already in your PATH"
  fi
}

# Detect user's current shell
detect_shell() {
  local current_shell
  current_shell=$(basename "$SHELL" 2>/dev/null || echo "unknown")

  case "$current_shell" in
    zsh | bash)
      echo "$current_shell"
      ;;
    *)
      # Fallback: check what shell is actually running this script
      if [[ -n "$ZSH_VERSION" ]]; then
        echo "zsh"
      elif [[ -n "$BASH_VERSION" ]]; then
        echo "bash"
      else
        # Default to zsh since it's macOS default since 10.15
        echo "zsh"
      fi
      ;;
  esac
}

# Get shell profile path based on detected shell
get_shell_profile() {
  local shell_type="$1"

  case "$shell_type" in
    zsh)
      echo "$HOME/.zshrc"
      ;;
    bash)
      # Check for existing bash profile files, prefer .bash_profile on macOS
      if [[ -f "$HOME/.bash_profile" ]]; then
        echo "$HOME/.bash_profile"
      elif [[ -f "$HOME/.bashrc" ]]; then
        echo "$HOME/.bashrc"
      else
        echo "$HOME/.bash_profile" # Create .bash_profile as default on macOS
      fi
      ;;
    *)
      echo "$HOME/.profile" # Generic fallback
      ;;
  esac
}

# Configure mise shell integration
configure_mise() {
  local shell_type
  shell_type=$(detect_shell)
  local profile_path
  profile_path=$(get_shell_profile "$shell_type")
  local mise_activation="eval \"\$(mise activate $shell_type)\""
  local profile_updated=false

  print_info "Detected shell: $shell_type"
  print_info "Using profile: $(basename "$profile_path")"

  # Check if mise activation is already configured
  if [[ -f "$profile_path" ]] && grep -q "mise activate $shell_type" "$profile_path"; then
    print_success "mise activation already configured in $(basename "$profile_path")"
    profile_updated=true
  fi

  # Also check for any existing mise activation (different shell) and warn
  if [[ -f "$profile_path" ]] && grep -q "mise activate" "$profile_path" && ! grep -q "mise activate $shell_type" "$profile_path"; then
    print_warning "Found mise activation for different shell in $(basename "$profile_path")"
    print_info "This will be updated to use $shell_type"
  fi

  if [[ "$profile_updated" == false ]]; then
    # Create the file if it doesn't exist
    touch "$profile_path"

    # Add mise activation
    {
      echo ""
      echo "# Initialize mise"
      echo "$mise_activation"
    } >>"$profile_path"

    print_success "Added mise activation to $(basename "$profile_path")"
    print_info "Close and reopen your terminal to activate the configuration"
  fi
}

# Update repository from main
update_repository() {
  # Check if we're in a git repository and update from main if applicable
  if [[ -d ".git" ]]; then
    local current_branch
    current_branch=$(git branch --show-current 2>/dev/null || echo "")
    if [[ "$current_branch" == "main" ]]; then
      git pull origin main
    elif [[ -n "$current_branch" ]]; then
      print_warning "Repository is on branch '$current_branch', not 'main'"
      print_warning "Installed applications may be out of date. Consider switching to main branch."
    fi
  fi
}

# Initialize development environment
init_environment() {
  local installer_args=("$@")

  print_info "Delegating to bootstrap installer for complete setup..."
  if [[ ${#installer_args[@]} -gt 0 ]]; then
    print_info "Passing arguments: ${installer_args[*]}"
  fi
  echo ""

  # Use local install.sh if available, otherwise download it
  local local_installer="$SCRIPT_DIR/install.sh"
  local installer_url="https://raw.githubusercontent.com/sourcegraph/revenue/main/install.sh"

  if [[ -f "$local_installer" ]]; then
    print_info "Using local installer..."
    if bash "$local_installer" "${installer_args[@]}"; then
      print_success "Environment initialization completed!"
    else
      print_error "Local installation failed"
      exit 1
    fi
  else
    print_info "Downloading installer from repository..."
    print_warning "Note: Remote installer does not support custom arguments like --install-path"
    print_info "For custom installation paths, clone the repository first and use the local installer"
    if curl -fsSL "$installer_url" | bash; then
      print_success "Environment initialization completed!"
    else
      print_error "Installation failed"
      print_info "You can also run the installer directly:"
      print_info "  curl -fsSL $installer_url | bash"
      exit 1
    fi
  fi
}

# Trust and install mise dependencies
trust_and_install_mise() {
  # Check if mise is available
  if ! command -v mise >/dev/null 2>&1; then
    print_warning "mise is not available on PATH; skipping mise trust/install steps"
    print_info "Ensure mise is installed and available on PATH, then run 'revenue update'"
    return 0
  fi

  cd "$SCRIPT_DIR"
  print_info "Trusting mise configurations in repository..."
  
  find . -path './.git' -prune -o -type f \( -name '.mise.toml' -o -name '.tool-versions' \) -print | while IFS= read -r config_file; do
    mise trust "$config_file" >/dev/null 2>&1 || true
  done
  
  print_success "Trusted all mise configurations in repository"

  print_info "Installing mise dependencies..."

  find . -path './.git' -prune -o -type f \( -name '.mise.toml' -o -name '.tool-versions' \) -print |
    xargs -n1 dirname |
    sort -u |
    while IFS= read -r config_dir; do
      (cd "$config_dir" && mise install >/dev/null 2>&1) || true
    done

  print_success "Installed mise dependencies"
}

# Update development environment
update_environment() {
  check_macos
  update_repository
  install_prerequisites # Ensure Homebrew is still available
  update_brewfile_dependencies
  update_amp_cli
  trust_and_install_mise
  print_success "Environment update completed!"
}

# Main function
main() {
  local action="${1:-}"

  case "$action" in
    "init")
      shift # Remove 'init' from arguments
      init_environment "$@"
      ;;
    "update")
      update_environment
      ;;
    "demo")
      # Delegate to amp_demos/demo with remaining arguments
      shift # Remove 'demo' from arguments
      cd "$SCRIPT_DIR/amp_demos"
      exec bash "./demo" "$@"
      ;;
    "help" | "-h" | "--help")
      show_help
      ;;
    "")
      echo -e "\033[0;31m✗ No command specified.\033[0m"
      echo ""
      show_help
      exit 1
      ;;
    *)
      echo -e "\033[0;31m✗ Unknown command: $action\033[0m"
      echo ""
      show_help
      exit 1
      ;;
  esac
}

# Run main function with all arguments
main "$@"
